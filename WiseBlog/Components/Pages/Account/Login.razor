@page "/account/login"
@rendermode InteractiveServer
@inject NavigationManager Nav
@inject WiseBlog.Data.SupabaseAuthService AuthService
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

<div class="container mt-5">
    <div class="card mx-auto shadow" style="max-width: 400px;">
        <div class="card-body">
            <h4 class="card-title mb-4 text-center">Login</h4>

            @if (!string.IsNullOrWhiteSpace(error))
            {
                <div class="alert alert-danger">@error</div>
            }

            <EditForm Model="@model" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label>Email</label>
                    <InputText class="form-control" @bind-Value="model.Email" />
                    <ValidationMessage For="@(() => model.Email)" />
                </div>

                <div class="mb-3">
                    <label>Password</label>
                    <InputText type="password" class="form-control" @bind-Value="model.Password" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>

                <button class="btn btn-primary w-100" type="submit" disabled="@loading">
                    @(loading
                        ? @<span><span class="spinner-border spinner-border-sm me-2"></span> Logging in...</span>
                        : @<span>Login</span>)
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel model = new();
    private bool loading = false;
    private string? error;

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private async Task LoginUser()
    {
        error = null;
        loading = true;

        try
        {
            var success = await AuthService.Login(model.Email, model.Password);
            if (success)
            {
                Nav.NavigateTo("/");
            }
            else
            {
                error = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error: {ex.Message}";
        }

        loading = false;
    }
}